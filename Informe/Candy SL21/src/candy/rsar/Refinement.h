/* Copyright (c) 2017 Felix Kutzner (github.com/fkutzner)
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 
 Except as contained in this notice, the name(s) of the above copyright holders
 shall not be used in advertising or otherwise to promote the sale, use or
 other dealings in this Software without prior written authorization.
 
 */

#ifndef X_32B3E7DC_D35F_4CE4_8AC0_1C936836339D_REFINEMENT_H
#define X_32B3E7DC_D35F_4CE4_8AC0_1C936836339D_REFINEMENT_H

#include "ApproximationState.h"
#include <core/SolverTypes.h>

#include <vector>
#include <utility>

namespace Candy {
    class Conjectures;
    class RefinementHeuristic;
    
    /**
     * \class EncodedApproximationDelta
     *
     * \ingroup RS_AbstractionRefinement
     *
     * \brief A clausal encoding of changes in a SAT problem under-approximation.
     *
     * Objects of this class contain changes to a SAT problem under-approximation.
     * The changes are encoded in clauses to be added to an existing
     * under-approximated SAT problem instance, with each new clause containing an
     * assumption literal. Intended to be generated by a system keeping track of
     * which clauses are active, the delta contains a complete list of assumption
     * literals controlling the activeness of all clauses encoding the rsp.
     * under-approximation (i.e. the activeness of the new clauses as well as the
     * activeness of clauses previously added via a delta).
     */
    class EncodedApproximationDelta {
    public:
        /** Returns the collection of new clauses. */
        virtual const std::vector<Cl>& getNewClauses() const noexcept = 0;
        
        /** Returns the current collection of assumption literals. */
        virtual const std::vector<Lit>& getAssumptionLiterals() const noexcept = 0;
        
        /**
         * Returns the amount of clauses with their assumption literals not
         * deactivating a clause belonging to the approximation encoding.
         */
        virtual size_t countEnabledClauses() const noexcept = 0;
        
        
        EncodedApproximationDelta() noexcept;
        virtual ~EncodedApproximationDelta();
        EncodedApproximationDelta(const EncodedApproximationDelta& other) = delete;
        EncodedApproximationDelta& operator= (const EncodedApproximationDelta& other) = delete;
    };
    
    
    /**
     * \class RefinementStrategy
     *
     * \ingroup RS_AbstractionRefinement
     *
     * \brief A strategy for computing and refining approximations for SAT problem instances.
     *
     * RefinementStrategy is responsible for computing and refining approximations for SAT
     * problem instances using refinement heuristics. The approximations are initially created
     * using conjectures about literal equivalencies and the problem's backbone. Refinement
     * is performed using heuristics supplied by the user.
     *
     */
    class RefinementStrategy {
    public:
        /** Creates the initial approximation. */
        virtual std::unique_ptr<EncodedApproximationDelta> init() = 0;
        
        /** Refines the currently existing approximation. */
        virtual std::unique_ptr<EncodedApproximationDelta> refine() = 0;
        
        RefinementStrategy() noexcept;
        virtual ~RefinementStrategy();
        RefinementStrategy(const RefinementStrategy& other) = delete;
        RefinementStrategy& operator= (const RefinementStrategy& other) = delete;
    };
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Creates an instance of the default RefinementStrategy implementation,
     * using conjectures obtained via random simulation.
     *
     * \param conjectures       The conjectures about literal equivalencies
     *                          and the problem's backbone.
     * \param heuristics        The refinement heuristics which should be used to compute
     *                          and refine approximations.
     * \param createVariable    A SAT problem variable creation function (used for
     *                          creating assumption literals).
     */
    std::unique_ptr<RefinementStrategy> createDefaultRefinementStrategy(const Conjectures& conjectures,
                                                                        std::unique_ptr<std::vector<std::unique_ptr<RefinementHeuristic>>> heuristics,
                                                                        std::function<Var()> createVariable);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Returns an assumption literal marking "activeness" for the given variable.
     */
    Lit activatedAssumptionLit(Var assumptionVar);
    
    /** 
     * \ingroup RS_AbstractionRefinement
     *
     * Returns an "inactive" assumption literal marking "inactiveness" for the given variable.
     */
    Lit deactivatedAssumptionLit(Var assumptionVar);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Encodes the given implication as a SAT problem clause.
     */
    Cl encodeImplication(Implication implication, Var assumptionVar);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Encodes the given backbone literal as a SAT problem clause.
     */
    Cl encodeBackbone(BackboneConjecture backbone, Var assumptionVar);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Returns the assumption literal contained in the given clause.
     */
    Lit getAssumptionLit(const Cl &clause);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Returns the non-assumption literals contained in the given clause created
     * by encode...(). For backbone-encoding clauses, the two returned literals
     * are equal.
     */
    std::pair<Lit, Lit> getNonAssumptionLits(const Cl &clause);
    
    /**
     * \ingroup RS_AbstractionRefinement
     *
     * Returns true iff the given assumption literal is marking "activeness".
     */
    bool isActive(Lit assumptionLit);
}

#endif
